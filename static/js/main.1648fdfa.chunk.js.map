{"version":3,"sources":["components/Item.js","components/Form1.js","App.js","serviceWorker.js","index.js"],"names":["Item","user","this","props","matricula","nombre","apellido","carrera","gender","color","onClick","deleteOp","id","React","Component","App","args","state","name","sexo","message","users","setState","console","log","e","validate","matriculaInput","document","getElementById","nombreInput","apellidoInput","carreraInput","colorInput","x","getElementsByName","forEach","radio","checked","value","genderInput","newUser","Date","getTime","unshift","localStorage","setItem","userIndex","map","indexOf","splice","target","htmlFor","onChange","bind","type","add","key","delete","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1648fdfa.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nclass Item extends React.Component{\n\n    render(){\n\n        let user = this.props.user\n\n    \n\n        return(\n            <li>\n                Matricula => {user.matricula},  Nombre => {user.nombre},  Apellido => {user.apellido},  \n                Carrera => {user.carrera},  Sexo => {user.gender},  Color favorito => {user.color}\n                \n                <button onClick={() => this.props.deleteOp(this.props.id)}>Borrar</button>\n                 \n            </li>\n        )\n    }\n}\n\nItem.propTypes = {\n\n    user: PropTypes.shape({\n\n    matricula: PropTypes.string.isRequired,\n    nombre: PropTypes.string.isRequired,\n    apellido: PropTypes.string.isRequired,\n    carrera: PropTypes.string.isRequired,\n    gender: PropTypes.string.isRequired,\n    color: PropTypes.string.isRequired,\n\n    }).isRequired,\n    \n    deleteOp: PropTypes.func.isRequired\n\n\n\n    \n}\n\nexport default Item","import React, { Component } from 'react'\nimport './Item'\nimport Item from './Item'\n\n\n\n\nclass App extends  Component{\n\n    constructor(args){\n        super(args)\n        this.state = {\n\n            matricula:\"\",\n            nombre:\"\",\n            name:\"\",\n            apellido:\"\",\n            sexo:\"\",\n            carrera:\"\",\n            color:\"\",\n            message:\"\",\n            gender:\"\",\n            \n            users:[\n\n            ]\n        }\n    }\n\n    validate(){\n        if(\n           this.state.matricula === '' || \n           this.state.nombre === '' ||\n           this.state.apellido === '' ||\n           this.state.carrera === '' ||\n           this.state.color === ''\n           ){\n\n            this.setState({\n                message:\"Favor completar campos faltantes\"\n            })\n            console.log(\"no hay datos\")\n            return false\n            \n        }\n        return true\n    }\n\n    add(e){\n\n        if(this.validate()){\n            \n        \n            const matriculaInput = document.getElementById(\"matricula\")\n            const nombreInput = document.getElementById(\"nombre\")\n            const apellidoInput = document.getElementById(\"apellido\")\n            const carreraInput = document.getElementById(\"carrera\")\n            const colorInput = document.getElementById(\"color\")\n\n           var x='NA';\n           document.getElementsByName(\"gender\").\n            forEach(radio => {\n                if(radio.checked){\n                    x = radio.value;\n                    console.log(radio.value)\n                }\n            })\n\n            const genderInput=x;\n            \n    \n            \n            let newUser = {\n\n                id: new Date().getTime(),\n                matricula: matriculaInput.value,\n                nombre: nombreInput.value,\n                apellido: apellidoInput.value,\n                carrera: carreraInput.value,\n                color: colorInput.value,\n                gender: genderInput\n\n            }\n\n            let users = this.state.users\n            users.unshift(newUser)\n\n            this.setState({\n                users : users\n            })\n\n            \n            this.setState({\n                message:\"Datos guardados correctamente!\"\n            })\n            \n            localStorage.setItem(\"matricula\", matriculaInput.value);\n            localStorage.setItem(\"nombre\", nombreInput.value);\n            localStorage.setItem(\"apellido\", apellidoInput.value);\n            localStorage.setItem(\"carrera\", carreraInput.value);\n            localStorage.setItem(\"color favorito\", colorInput.value);\n            localStorage.setItem(\"Sexo\", genderInput.value);\n            \n\n            this.setState({\n                matricula:\"\",\n                nombre:\"\",\n                apellido:\"\",\n                carrera:\"\",\n                color:\"\"\n\n            })\n            \n         \n        }\n        \n        \n\n    }\n    \n\n    delete(id){\n\n        console.log(\"Usuario elimindado\");\n\n        let userIndex = this.state.users.map( x =>{return x.id}).indexOf(id)\n\n        let users = this.state.users\n\n        users.splice(userIndex, 1)\n\n        this.setState({\n\n            users: users\n        })\n\n\n\n    }\n\nonChange(e){\n    this.setState({\n        [e.target.name]: e.target.value\n    })\n}\n\n    render() {\n        return(\n            <div>\n\n                <div>\n                <label htmlFor=\"matricula\">Matricula</label>\n                <br></br>\n                    <input \n                    value={this.state.matricula} \n                    onChange = {this.onChange.bind(this)} \n                    name=\"matricula\"  id=\"matricula\" type=\"text\" >                        \n                    </input>\n                </div>\n\n                <div>\n                <label htmlFor=\"nombre\">Nombre</label>\n                <br></br>\n                    <input\n                    value={this.state.nombre}\n                    onChange = {this.onChange.bind(this)}\n                    name=\"nombre\" id=\"nombre\" type=\"text\" >\n                    </input>\n                </div>\n\n                <div>\n                <label htmlFor='apellido'>Apellido</label>\n                <br></br>\n                <input \n                    value={this.state.apellido}\n                    onChange = {this.onChange.bind(this)}\n                    name=\"apellido\" id=\"apellido\" type=\"text\" \n                    ></input>\n                </div>\n\n                <div>\n                <label htmlFor='carrera'>Carrera</label>\n                <br></br>\n                <input \n                    value={this.state.carrera}\n                    onChange = {this.onChange.bind(this)}\n                    name=\"carrera\" id=\"carrera\" type=\"text\" ></input>\n                </div>\n\n                <div>\n                <label htmlFor=\"color\">Color Favorito</label>\n                <br></br>\n                <input \n                value={this.state.color}\n                onChange = {this.onChange.bind(this)}\n                name=\"color\" id=\"color\" type=\"text\" ></input>\n                </div>\n\n                <div>\n                <label htmlFor='gender'>Sexo</label>\n                <input id='hombre' type=\"radio\" name=\"gender\" value='h' onChange={this.onChange.bind(this)}></input>Hombre\n                <input id='mujer' type=\"radio\" name=\"gender\" value='m' onChange={this.onChange.bind(this)}></input>Mujer\n                </div>\n             \n                <div>\n                <button onClick={this.add.bind(this)} id='btn_salvar'>Salvar</button>\n                <br></br>\n                <span >{this.state.message}</span>\n                </div>\n\n                <ul>\n                    {this.state.users.map(user => {\n                        return <Item\n\n                            key ={user.id}\n                            user = {user}\n                            deleteOp={this.delete.bind(this)}\n\n\n                         />\n                    })}\n                </ul>\n            </div>\n\n\n        )\n    }\n} \n\n\nexport default App\n\n\n","import React from 'react';\n//import logo from './logo.svg';\n//import './App.css';\nimport './components/Form1.css';\nimport Form1 from  './components/Form1.js';\n\nfunction App() {\n  return (\n    <Form1/>\n\n   \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import App from './components/Form'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}